C 
C 
C 
        IMPLICIT REAL *8 (A-H,O-Z)
        COMPLEX *16 A(10000),Y(500),XK(500),EK(500),
     1          W(10000),ERR(300),AXK(500),AEK(500),
     2          EKM1(500),AEKM1(500)
        EXTERNAL MULT
C 
C        CREATE THE SYSTEM
C 
        CALL PRINI(6,13)
        N=20
C 
        PRINT *,'ENTER N'
        READ *, N
        CALL PRINF('N=*',N,1)
C 
        PRINT *,'ENTER EPS'
        READ *, EPS
        CALL PRIN2('EPS=*',EPS,1)
        NUMIT=N*4 +2
        CALL CREMAT(W,A,Y,N,EPS)
        CALL PRIN2('A IS*',A,N**2*2)
        CALL PRIN2('AND Y IS*',Y,N*2)
C 
C        SOLVE THE SYSTEM
C 
        EPS2=1.0D-18
        Numit=50
C 
	call CMCONR(IER,Y,N,Xk,EPS2,NUMIT,NITER,ERR,W,
     1       MULT,A)
c 
        CALL PRIN2('AND XK IS*',XK,N*2)
         CALL PRINF('IER=*',IER,1)
         CALL PRIN2('ERR IS*',ERR,NITER)
        CALL PRINF('NITER IS*',NITER,1)
CCCC    CALL PRIN2('AND ERR=*',ERR,NUMIT+1)
        STOP
        END
C 
C 
C 
C 
C 
        SUBROUTINE MULT(A,X,Y,N)
        save
        COMPLEX *16 A(N,N),X(1),Y(1),D
        DO 1400 I=1,N
        D=0
        DO 1200 J=1,N
        D=D+A(I,J)*X(J)
 1200 CONTINUE
        Y(I)=D
 1400 CONTINUE
        RETURN
        END
C 
C 
C 
C 
C 
        SUBROUTINE CREMAT(A,B,Y,N,EPS)
        IMPLICIT REAL *8 (A-H,O-Z)
        save
        COMPLEX *16 A(N,N),Y(1),IMA,B(N,N)
        DATA IMA/(0.0D0,1.0D0)/
        CALL PRIN2('INSIDE CREMAT, EPS=*',EPS,1)
        DO 1400 I=1,N
        DO 1200 J=1,N
        A(I,J)=EPS *( (I-J)     +IMA*DABS(1.0D0*(I-J))  )
 1200 CONTINUE
        A(I,I)=1.0/I
        A(I,I)=1
C 
        Y(I)=20*I +   IMA *5/I
CCC     Y(I)=20   +   IMA *5*I**2
CCCC    Y(I)=20*I
 1400 CONTINUE
        A(10,10)=1
C 
        CALL MATMUA(A,A,B,N)
c 
c 
        do 1600 i=1,n
        b(i,i)=b(i,i)-10
 1600 continue
c 
        RETURN
        END
C 
C 
C 
C 
C 
        SUBROUTINE MATMUA(A,B,C,N)
        IMPLICIT COMPLEX *16 (A-H,O-Z)
        save
        DIMENSION A(N,N),B(N,N),C(N,N)
C 
        DO 2000 I=1,N
        DO 1800 J=1,N
        D=0
        DO 1600 K=1,N
        D=D+ A(I,K)*DCONJG(B(J,K) )
 1600 CONTINUE
        C(I,J)=D
 1800 CONTINUE
 2000 CONTINUE
        RETURN
        END
C 
C 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c 
c             this is the end of the debugging code, and the beginning of
c             the actual conjugatte residual routines.
c 
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C 
C 
C 
	SUBROUTINE CMCONR(IER,Y,N,X,EPS,NUMIT,NITER,ERRORS,W,
     1       MULT,A)
	 IMPLICIT REAL *8 (A-H,O-Z)
	 COMPLEX *16 Y(1),X(1),W(1),A(1)
	 REAL *8 ERRORS(1)
C 
C        THIS SUBROUTINE SOLVES A LINEAR SYSTEM BY MEANS OF THE
C        CONJUGATE RESIDUAL ALGORITHM. THE MATRIX OF THE SYSTEM
C        NEED NOT BE SYMMETRIC BUT HAS TO BE NORMAL.
C        THE STARTING POINT IS ALWAYS X_0=0.
C 
C            INPUT PARAMETERS:
C 
C   Y - THE RIGHT-HAND SIDE OF THE SYSTEM
C   N - THE DIMENSION OF THE SYSTEM
C   EPS - THE ACCURACY TO WHICH THE SYSTEM WILL BE SOLVED.
C >>>>>>>>>>>>>>>EXPLANATION:
C        THE ITERATIONS WILL BE STOPPED WHEN || A(X)-Y || < EPS.
C   NUMIT - THE MAXIMUM NUMBER OF ITERATIONS PERMITTED.
C >>>>>>>>>>>>>>>EXPLANATION:
C        THE PROCESS WILL BE TERMINATED AFTER NUMIT ITERATIONS,
C        EVEN IF THE DESIRED ACCURACY HAS NOT BEEN ACHIEVED.
C   MULT - THE NAME OF THE USER-PROVIDED SUBROUTINE MULTIPLYING
C        THE MATRIX OF THE SYSTEM BY THE VECTOR. ITS ACTUAL
C        NAME MUST BE DECLARED  "EXTERNAL"  IN THE CALLING PROGRAM.
C        THE SUBROUTINE EVALUATES THE PRODUCT  Y=A(X) FOR THE INPUT
C        VECTOR  X  , AND ITS CALLING SEQUENCE MUST BE
C 
C         MULT(A,X,Y,N), WITH A THE MATRIX OF THE SYSTEM, AND N
C         ITS DIMENSION.
C   A - THE MATRIX OF THE SYSTEM.
C 
C           OUTPUT PARAMETERS:
C 
C   IER - ERROR RETURN CODE.
C     IER=0 MEANS SUCCESSFUL TERMINATION.
C     IER=4 MEANS THAT THE MAXIMUM NUMBER OF ITERATIONS HAS BEEN
C           PERFORMED WITHOUT THE DESIRED ACCURACY (EPS) BEING
C           ACHIEVED.
C     IER=8 MEANS THAT THE ERROR OF THE APPROXIMATION FAILED
C           TO DECREASE AS A RESULT OF AN ITERATION. GENERALLY,
C           IT MEANS THAT THE MATRIX IS EITHER NON-NORMAL OR
C           SINGULAR. ANOTHER POSSIBILITY IS THAT EPS WAS
C           SPECIFIED TOO SMALL FOR THE PRECISION OF CALCULATIONS
C           AND THE SYSTEM IN QUESTION (EPS IS  A B S O L U T E
C           PRECISION, AND IT IS THE USER'S RESPONSIBILITY TO
C           MAKE SURE THAT IT IS SCALED CORRECTLY !).
C           OFTEN, IER=8 IS A RESULT OF A BUG - CHECK YOUR CODE.
C   X - THE SOLUTION OF THE SYSTEM AS OBTAINED BY THE SUBROUTINE
C   NITER - THE TOTAL NUMBER OF ITERATIONS ACTUALLY PERFORMED
C   ERRORS - THE ARRAY CONTAINING RESIDUALS OF THE SYSTEM FOR ALL
C           ITERATIONS.
C >>>>>>>>>>>> EXPLANATION:
C           ERRORS(K) = || A(X_K) - Y ||, WHERE X_K IS THE
C           APPROXIMATION OBTAINED AFTER THE  K-1 -ST ITERATION
C           OF THE PROCESS. the elements of the array errors
c           should be decreasing monotonically, except (very
c           infrequently!) the elements whose numbers are divisible
c           by 5, i.e. the 5-th element might be greater than the
c           4-th, the 11-th greater than the 10-th, etc. otherwise,
c           the sequence errors will be monotone.
C 
C        WORK ARRAYS:
C   W - MUST BE AT LEAST 5*N+2  COMPLEX LOCATIONS LONG
C 
C 
C       ALLOCATE SPACE FOR WORK ARRAYS
C 
	IAXK=1
	IDELTA=IAXK+N
	IADELT=IDELTA+N
	IEK=IADELT+N
	IAEK=IEK+N
C 
C       SOLVE THE LINEAR SYSTEM
C 
	CALL CMCNG0(IER,Y,N,X,EPS,NUMIT,NITER,W(IAXK),
     1   W(IDELTA), W(IADELT),W(IEK),W(IAEK),ERRORS,MULT,A)
       RETURN
       END
C 
C 
C 
C 
C 
	SUBROUTINE CMCNG0(IER,Y,N,XK,EPS,NUMIT,NITER,
     1  AXK,DELTA,ADELTA,EK,AEK,ERRORS,MULT,A)
	 IMPLICIT REAL *8 (A-H,O-Z)
	 COMPLEX *16 Y(1),XK(1),AXK(1),DELTA(1),ADELTA(1),
     1    EK(1),AEK(1),CD,CD1,A(1)
	 REAL *8 ERRORS(1)
	IER=0
	DONE=1
	ZERO=0
	NRECOM=5
	EPS2=EPS**2
C 
C      INITIALIZE THE PROCESS
C 
	DO 1400 I=1,N
	XK(I)=ZERO
        axk(i)=zero
 1400 CONTINUE
	IRECOM=0
C 
C       CONDUCT ITERATIONS
C 
	DO 4000 K=1,NUMIT
	NITER=K
	IRECOM=IRECOM+1
         call prinf('k=*',k,1)
C 
C       IF THE TIME HAS COME - RECOMPUTE A(X) BY MATRIX-VECTOR
C       MULTIPLICATION, AS OPPOSED TO THE QUICK AND DIRTY
C       LINEAR COMBINATION APPROACH
C 
	IF (IRECOM .NE. NRECOM) GOTO 1500
	CALL MULT(A,XK,AXK,N)
	IRECOM=0
 1500 CONTINUE
C 
C        COMPUTE   Y-A(XK)
C 
	DO 1600 I=1,N
	DELTA(I)=Y(I)-AXK(I)
 1600 CONTINUE
C 
C       CHECK FOR THE CONVERGENCE OF THE ALGORITHM
C 
	ERR=0
	DO 1650 I=1,N
	ERR=ERR+DELTA(I)*DCONJG(DELTA(I))
 1650 CONTINUE
	ERRORS(K)=DSQRT(ERR)
	IF(ERR .LE. EPS2) RETURN
C 
C       CHECK FOR THE FAILURE OF THE ALGORITHM
C 
	IF(K.EQ.1) GOTO 1660
        if(irecom .eq. 0) goto 1660
	IF (ERR.LE. ERROLD) GOTO 1660
	IER=8
      	RETURN
 1660 CONTINUE
	ERROLD=ERR
C 
C      COMPUTE   A( Y-A(XK) )
C 
	CALL MULT(A,DELTA,ADELTA,N)
C 
C        ORTHOGONALIZE DELTA TO THE PRECEEDING BASIS VECTOR IN THE
C        NORM ASSOCIATED WITH A^* A
C 
	IF( K.EQ.1) GOTO 2100
	CD=ZERO
	DO 1800 I=1,N
	CD=CD+DCONJG( AEK(I))*ADELTA(I)
 1800 CONTINUE
	DO 2000 I=1,N
	DELTA(I)=DELTA(I)-EK(I)*CD
	ADELTA(I)=ADELTA(I)-AEK(I)*CD
 2000 CONTINUE
 2100 CONTINUE
C 
C       NORMALIZE DELTA SO THAT  (A(DELTA), A(DELTA)) =1
C 
	D=ZERO
	DO 2200 I=1,N
	D=D+ADELTA(I) *DCONJG(ADELTA(I))
 2200 CONTINUE
	D=DONE/DSQRT(D)
	DO 2400 I=1,N
	ADELTA(I)=  ADELTA(I)*D
	DELTA(I)=  DELTA(I)*D
 2400 CONTINUE
C 
C     CALCULATE THE PRODUCT OF A(XK) AND A(DELTA)
C 
	CD1=0
	DO 2500 I=1,N
	CD1=CD1+AXK(I)*DCONJG(ADELTA(I))
 2500 CONTINUE
C 
C        CALCULATE XKP1 AND AXKP1
C 
	CD=ZERO
	DO 2600 I=1,N
	CD=CD+ DCONJG(  ADELTA(I)) *Y(I)
 2600 CONTINUE
	CD=CD-CD1
         cd=dconjg(cd)
	DO 2800 I=1,N
	XK(I)=XK(I)+CD*DELTA(I)
	AXK(I)=AXK(I)+CD*ADELTA(I)
 2800 CONTINUE
C 
C       STORE EK, AEK
C 
	DO 3000 I=1,N
	EK(I)=DELTA(I)
	AEK(I)=ADELTA(I)
 3000 CONTINUE
 4000 CONTINUE
	IER=4
	RETURN
	END

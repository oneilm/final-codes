C 
C 
C 
        IMPLICIT REAL *8 (A-H,O-Z)
        COMPLEX *16 A(10000),Y(500),XK(500),EK(500),
     1          W(10000),ERR(300),AXK(500),AEK(500),
     2          EKM1(500),AEKM1(500)
        EXTERNAL MULT
C 
C        CREATE THE SYSTEM
C 
        CALL PRINI(6,13)
        N=20
C 
        PRINT *,'ENTER N'
        READ *, N
        CALL PRINF('N=*',N,1)
C 
        PRINT *,'ENTER EPS'
        READ *, EPS
        CALL PRIN2('EPS=*',EPS,1)
        NUMIT=N*4 +2
        CALL CREMAT(W,A,Y,N,EPS)
        CALL PRIN2('A IS*',A,N**2*2)
        CALL PRIN2('AND Y IS*',Y,N*2)
C 
C        SOLVE THE SYSTEM
C 
        EPS2=1.0D-10
        NREC=100
C 
        CALL CCONGR(IER,N,A,MULT,Y,EPS2,NUMIT,XK,
     1     NITER,ERR,W)
CCC     CALL CCONG1(IER,N,A,Y,NUMIT,XK,AXK,
CCC  1     EK,AEK,EKM1,AEKM1,ERR,NREC,MULT,EPS2,NITER)
C 
        CALL PRIN2('AND XK IS*',XK,N*2)
         CALL PRINF('IER=*',IER,1)
         CALL PRIN2('ERR IS*',ERR,NITER)
        CALL PRINF('NITER IS*',NITER,1)
CCCC    CALL PRIN2('AND ERR=*',ERR,NUMIT+1)
        STOP
        END
C 
C 
C 
C 
C 
        SUBROUTINE MULT(A,X,Y,N)
        save
        COMPLEX *16 A(N,N),X(1),Y(1),D
        DO 1400 I=1,N
        D=0
        DO 1200 J=1,N
        D=D+A(I,J)*X(J)
 1200 CONTINUE
        Y(I)=D
 1400 CONTINUE
        RETURN
        END
C 
C 
C 
C 
C 
        SUBROUTINE CREMAT(A,B,Y,N,EPS)
        IMPLICIT REAL *8 (A-H,O-Z)
        save
        COMPLEX *16 A(N,N),Y(1),IMA,B(N,N)
        DATA IMA/(0.0D0,1.0D0)/
        CALL PRIN2('INSIDE CREMAT, EPS=*',EPS,1)
        DO 1400 I=1,N
        DO 1200 J=1,N
        A(I,J)=EPS *( (I-J)     +IMA*DABS(1.0D0*(I-J))  )
 1200 CONTINUE
        A(I,I)=1.0/I
        A(I,I)=1
C 
        Y(I)=20*I +   IMA *5/I
CCC     Y(I)=20   +   IMA *5*I**2
CCCC    Y(I)=20*I
 1400 CONTINUE
        A(10,10)=1
C 
        CALL MATMUA(A,A,B,N)
        RETURN
        END
C 
C 
C 
C 
C 
        SUBROUTINE MATMUA(A,B,C,N)
        IMPLICIT COMPLEX *16 (A-H,O-Z)
        save
        DIMENSION A(N,N),B(N,N),C(N,N)
C 
        DO 2000 I=1,N
        DO 1800 J=1,N
        D=0
        DO 1600 K=1,N
        D=D+ A(I,K)*DCONJG(B(J,K) )
 1600 CONTINUE
        C(I,J)=D
 1800 CONTINUE
 2000 CONTINUE
        RETURN
        END
C 
C 
c 
c 
c 
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c 
c          this is the end of the debugging code and the beginning
c          of the actual conjugate residual routine
c 
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c 
c 
C 
C 
C 
        SUBROUTINE CCONGR(IER,N,A,MULT,Y,EPS,NUMIT,X,
     1     NITER,ERR,W)
        IMPLICIT REAL *8 (A-H,O-Z)
        save
        COMPLEX *16 A(1),Y(1),X(1),W(1)
        DIMENSION ERR(1)
C 
C        THIS SUBROUTINE SOLVES A  COMPLEX LINEAR SYSTEM WITH A SELF-ADJOINT
C        MATRIX BY MEANS OF A CONJUGATE GRADIENT ALGORITHM.
C        THE ALGORITHM HAS BEEN PUT TOGETHNER WITHOUT PROPER
C        ANALYSIS AND WITH SEVERAL CLUDGES - USER BEWARE.
C 
C                      INPUT PARAMETERS:
C 
C   N - THE DIMENSIONALITY OF THE SYSTEM
C   A - THE MATRIX OF THE SYSTEM (OR WHATEVER PARAMETER THE USER-SUPPLIED
C       MATRIX-VECTOR MULTIPLICATION ROUTINE MULT (SEE BELOW) REQUIRES.
C   MULT - THE USER-SUPPLIED MATRIX-VECTOR MULTIPLICATION ROUTINE.
C 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C      DESCRIPTION OF THE CALLING SYSTEM OF SUBROUTINE MULT
C 
C       THE CALLING SEQUENCE OF MULT IS AS FOLLOWS:
C 
C          MULT(A,X,Y,N)
C 
C             WITH THE FOLLOWING PARAMETERS:
C      A - THE MATRIX OF THE SYSTEM (OR WHATEVER OTHER PARAMETER) (INPUT)
C      X - THE VECTOT TO WHICHJ A IS TO BE APPLIED (INPUT)
C      Y -=A(X) (OUTPUT)
C      N - THE DIMENSIONALITY OF A,X,Y (INPUT)
C 
C      END OF DESCRIPTION OF THE CALLING SYSTEM OF SUBROUTINE MULT
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C 
C   Y - THE RIGHT-HAND SIDE OF THE SYSTEM TO BE SOLVED
C   EPS - THED ACCURACY TO WHICH THE SYSTEM IS TO BE SOLVED
C   NUMIT - THE MAXIMUM NUMBER OF ITERATIONS PERMITTED
C 
C                       OUTPUT PARAMETERS:
C 
C   IER - ERROR RETURN CODE
C     IER=0 MEANS SUCCESSFUL CONCLUSION
C     IER=4 MEANS THAT THE MAXIMUM PERTMITTED NUMBER OF ITERATIONS
C           (NUMIT) HAS BEEN PERFORMED WITHOUT THE DESIRED PRECISION
C           BEING ACHIEVED
C     IER=8 MEANS THAT THE QUADRATIC FORM FAILED TO DECREASE BEFORE
C           NUMIT ITERATIONS HAVE BEEN PERFORMED OR THE ACCURACY
C           EPS HAS BEEN ACHIEVED
C   X - THE SOLUTION OF THE SYSTEM
C   NITER - THE NUMBER OF ITERATIONS ACTUALLY PERFORMED
C   ERR - THE ARRAY OF ERRORS PRODUCED BY THE ALGORITHM ON VARIOUS STEPS,
C           THAT IS ERR(I) = ||A(X_I)-Y||, WHERE X_I IS THE APPROXIMATION
C           TO THE SOLUTION OBTAINED ON THE I-TH STEP OF THE CONJUGATE
C           GRADIENT PROCESS, AND || * || IS THE L^2 NORM
C 
C                         WORK ARRAY :
C 
C   W - MUST BE AT LEAST 5*N+10 COMPLEX *16 ELEMENTS LONG.
C 
C        . . . ALLOCATE MEMORY FOR THE CONJUGATE GRADIENT SCHEME
C 
        IAXK=1
        IEK=IAXK+N
        IAEK=IEK+N
        IEKM1=IAEK+N
        IAEKM1=IEKM1+N
C 
C       CONDUCT THE CONJUGATE GRADIENT ITERATIONS
C 
        NREC=6
CCCC    NREC=100
        CALL CCONG1(IER,N,A,Y,NUMIT,X,W(IAXK),
     1    W(IEK),W(IAEK),W(IEKM1),W(IAEKM1),ERR,NREC,
     2    MULT,EPS,NITER)
        RETURN
        END
C 
C 
C 
C 
C 
        SUBROUTINE CCONG1(IER,N,A,Y,NUMIT,XK,AXK,
     1     EK,AEK,EKM1,AEKM1,ERR,NREC,MULT,EPS,NITER)
        IMPLICIT REAL *8 (A-H,O-Z)
        save
        COMPLEX *16 A(1),Y(1),XK(1),AXK(1),EK(1),AEK(1),
     1     EKM1(1),AEKM1(1),CD,CLAM,CD2
        DIMENSION ERR(1)
C 
C       INITIALIZE THE CONJUGATE GRADIENT ITERATIONS
C 
        DONE=1
        IFREC=0
        IER=0
        DOLD=1.0D60
CCCC    CALL PRIN2('Y=*',Y,N*2)
        DO 1400 I=1,N
        XK(I)=0
        AXK(I)=0
CCCC    XK(I)=Y(I)
CCCC    XK(I)=I
 1400 CONTINUE
C 
C      CONDUCT CONJUGATE GRADIENT ITERATIONS
C 
        DO 4000 K=1,NUMIT
        CALL PRINF('K=*',K,1)
CCCC    CALL PRIN2('XK=*',XK,N*2)
        NITER=K
C 
C       IF TIME HAS COME TO RECOMPUTE A(XK) - DO SO
  
        IFREC=IFREC+1
        IF(IFREC .GE. NREC) IFREC=1
        IF (IFREC .NE. 1) GOTO 1600
         IF(K.EQ.1) GOTO 1600
C 
        CALL MULT(A,XK,AXK,N)
CCC     CALL PRIN2('AXK AFTER MULT=*',AXK,N*2)
 1600 CONTINUE
C 
C       FIND THE RESIDUAL
C 
        ER=0
        DO 2200 I=1,N
        EK(I)=Y(I)-AXK(I)
        ER=ER+EK(I)*DCONJG(EK(I))
 2200 CONTINUE
CCC     CALL PRIN2('EK=*',EK,N*2)
        ER=DSQRT(ER)
CCCC    CALL PRIN2('ER=*',ER,1)
        ERR(K)=ER
C 
C       IF THE DESIRED ACCURACY HAS BEEN ACHIEVED - EXIT
C       THE SUBROUTINE
C 
        IF (ER. LT. EPS) RETURN
C 
C       FIND THE NEW DIRECTION OF OPTIMIZATION
C 
          IF(K.EQ.1) GOTO 2700
        CD=0
        DO 2400 I=1,N
        CD=CD+EK(I)*DCONJG(AEKM1(I))
 2400 CONTINUE
CCCC    CD=DCONJG(CD)
CCCCC   CALL PRIN2('CD=*',CD,2)
C 
        DO 2600 I=1,N
        EK(I)=EK(I)-CD*EKM1(I)
 2600 CONTINUE
 2700 CONTINUE
C 
C       EVALUATE A(EK)
C 
        CALL MULT(A,EK,AEK,N)
CCC     CALL PRIN2('AEK=*',AEK,N*2)
C 
C        NORMALIZE THE NEW DIRECTION
C 
        D=0
        DO 2800 I=1,N
        D=D+EK(I)*DCONJG(AEK(I))
 2800 CONTINUE
        D=DSQRT(D)
        D=DONE/D
C 
CCC     CALL PRIN2('D=*',D,1)
        DO 3000 I=1,N
        EK(I)=EK(I)*D
        AEK(I)=AEK(I)*D
 3000 CONTINUE
C 
C       FIND THE SIZE OF THE MOVE IN THE DIRECTION EK
C 
        CD=0
        CD2=0
        DO 3200 I=1,N
        CD=CD+EK(I)*DCONJG(Y(I))
        CD2=CD2+AEK(I)*DCONJG(XK(I))
 3200 CONTINUE
CCCCC   CD2=DCONJG(CD2)
        CLAM=CD-CD2
CCCC    CALL PRIN2('CD2=*',CD2,2)
CCCC    CALL PRIN2('CLAM=*',CLAM,2)
cccc    D=CLAM
cccc    CLAM=D
        clam=dconjg(clam)
CCCC    CALL PRIN2('EK BEFORE END OF LOOP*',EK,N*2)
C 
C        ADJUST XK, AXK
C 
        DO 3400 I=1,N
        XK(I)=XK(I)+CLAM*EK(I)
        AXK(I)=AXK(I)+CLAM*AEK(I)
 3400 CONTINUE
C 
C       EVALUATE THE QUADRATIC FORM BEING MINIMIZED
C 
        D1=0
        D2=0
        CD=0
        DO 3500 I=1,N
        D1=D1+AXK(I)*DCONJG(XK(I))
        D2=D2+XK(I)*CONJG(Y(I))
        CD=CD+XK(I)*CONJG(Y(I))
 3500 CONTINUE
CCCC    CALL PRIN2('D1 AS EVALUATED IS*',D1,1)
CCCC    CALL PRIN2('CD AS EVALUATED IS*',CD,2)
        D=D1/2-D2
CCCC    CALL PRIN2('AND QUADRATIC FORM IS*',D,1)
C 
C       CHECK IF THE FORM BEING MINIMIZED IS STILL DEcREASING
C 
        IF(DOLD. GT. D) GOTO 3550
C 
C       THE QUADRATIC FORM STOPPED DECREASING - SET IER TO 8
C       AND EXIT
C 
        IER=8
cccc    RETURN
 3550 CONTINUE
        DOLD=D
C 
C       MEMORIZE EK, AEK FOR THE NEXT ITERATION
C 
        DO 3600 I=1,N
        EKM1(I)=EK(I)
        AEKM1(I)=AEK(I)
 3600 CONTINUE
C 
 4000 CONTINUE
C 
C        THE MAXIMUM PERMITTED NUMBER OF ITERATIONS HAS BEEN
C        PERFORMED WITHOUT THE DESIRED ACCURACY BEING ACCURACY
C        ACHIEVED. INFORM THE USER AND EXIT
C 
        IER=4
        RETURN
        END
